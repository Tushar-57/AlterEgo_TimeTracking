package com.tushar.demo.timetracker.controller;

import com.tushar.demo.timetracker.config.JwtUtils;
import com.tushar.demo.timetracker.dto.LoginRequest;
import com.tushar.demo.timetracker.dto.SignupRequest;
import com.tushar.demo.timetracker.model.Users;
import com.tushar.demo.timetracker.repository.UserRepository;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.*;
import jakarta.validation.Valid;
import org.springframework.security.core.userdetails.UserDetails;

@RestController
@RequestMapping("/api/auth")
public class AuthController {

    @Autowired AuthenticationManager authenticationManager;
    @Autowired UserRepository userRepository;
    @Autowired PasswordEncoder passwordEncoder;
    @Autowired JwtUtils jwtUtils;

    @PostMapping("/signup")
    public ResponseEntity<?> registerUser(@Valid @RequestBody SignupRequest signupRequest) {
    	System.out.println("SignUp Request Received !");
        if (userRepository.existsByEmail(signupRequest.email())) { // Changed
        	return ResponseEntity.badRequest().body(Map.of(
                    "error", "Email is already taken!"
                ));
        }

        Users user = new Users();
        user.setName(signupRequest.name()); // Changed
        user.setEmail(signupRequest.email()); // Changed
        user.setPassword(passwordEncoder.encode(signupRequest.password())); // Changed
        
        userRepository.save(user);
        
        UserDetails userDetails = new org.springframework.security.core.userdetails.User(
                user.getEmail(),
                user.getPassword(),
                new ArrayList<>()
            );
            String jwt = jwtUtils.generateToken(userDetails);
            System.out.println("\n---------------------------------\nUser was Register Successfully \n---------------------------------\n");

            return ResponseEntity.ok(Map.of(
                "message", "User registered successfully!",
                "token", jwt
            ));
    }
//    V1
//    @PostMapping("/login")
//    public ResponseEntity<?> authenticateUser(@Valid @RequestBody LoginRequest loginRequest) {
//    	
//        System.out.println("Login - Backend Called ! " + loginRequest.toString());
////        System.out.println("Email: " + loginRequest.email());
////        System.out.println("Password: " + loginRequest.password());
//        // Use the methods generated by the record to access the fields
//        Authentication authentication = authenticationManager.authenticate(
//            new UsernamePasswordAuthenticationToken(
//                loginRequest.email(),        // Access the email using email()
//                loginRequest.password().trim()  // Access the password using password()
//            )
//        );
//        
//        SecurityContextHolder.getContext().setAuthentication(authentication);
//        UserDetails userDetails = (UserDetails) authentication.getPrincipal();
//        String jwt = jwtUtils.generateToken(userDetails);
//
//        Map<String, String> response = new HashMap<>();
//        response.put("token", jwt);
//        return ResponseEntity.ok(response);
//        
////        return ResponseEntity.ok().header("Authorization", "Bearer " + jwt).body("Login successful");
//    }
    
    @PostMapping("/login")
    public ResponseEntity<?> authenticateUser(@Valid @RequestBody LoginRequest loginRequest) {
        try {
            Authentication authentication = authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(
                    loginRequest.email(),
                    loginRequest.password()
                )
            );
            
            SecurityContextHolder.getContext().setAuthentication(authentication);
            String jwt = jwtUtils.generateToken((UserDetails) authentication.getPrincipal());
            
            return ResponseEntity.ok(Map.of(
                "token", jwt,
                "id", authentication.getName(),
                "message", "Registration Sucess !"
            ));
        } catch (AuthenticationException e) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
                    .body(Map.of(
                        "error", "Invalid credentials",
                        "message", "The email or password you entered is incorrect"
                    ));
            }
    }
    
    
    
    @GetMapping("/validate")
    public ResponseEntity<?> validateToken(@RequestHeader("Authorization") String authHeader) {
        String token = authHeader.substring(7);
        if (jwtUtils.validateToken(token)) {
            return ResponseEntity.ok().build();
        }
        return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
    }
    
}